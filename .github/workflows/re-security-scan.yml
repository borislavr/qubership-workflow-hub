name: On-demand Security Scan (Grype + Trivy)

on:
  workflow_call:
    inputs:
      target:
        description: "Scan part"
        default: "docker"
        type: string
      image:
        description: "Docker image (for docker). By default ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""
        type: string
      only-high-critical:
        description: "Scope only HIGH + CRITICAL"
        required: false
        default: true
        type: boolean
      trivy-scan:
        description: "Trivy scan"
        required: false
        default: true
        type: boolean
      grype-scan:
        description: "Grype scan"
        required: false
        default: true
        type: boolean
      continue-on-error:
        description: "Continue on error"
        required: false
        default: true
        type: boolean
      only-fixed:
        description: "Ignore unfixed vulnerabilities"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write
  packages: read

env:
  GRYPE_SEVERITY: "critical"
  TARGET: ${{ inputs.target }}
  TRIVY_SEVERITY: >-
    ${{ inputs['only-high-critical'] && 'HIGH,CRITICAL' || 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL' }}
  IMAGE: >-
    ${{ inputs.target == 'docker' && (inputs.image != '' && inputs.image || format('ghcr.io/{0}:latest', github.repository)) || '' }}

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Scan plan
        run: |
          echo "Mode: ${TARGET}"
          echo "Image (if docker): ${IMAGE}"
          echo "Only high+critical: ${{ inputs['only-high-critical'] }}"
          if [ "${TARGET}" = "docker" ]; then
            echo "   - Docker scan: enabled"
          else
            echo "   - Docker scan: skipped"
          fi
          if [ "${TARGET}" = "source" ]; then
            echo "   - Source scan: enabled"
          else
            echo "   - Source scan: skipped"
          fi

  grype-scan:
    if: ${{ inputs.grype-scan }}
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Login to GHCR (docker target)
        if: ${{ inputs.target == 'docker' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef #v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository (source target)
        if: ${{ inputs.target == 'source' }}
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Grype scan (Docker: High+Critical)"
        if: ${{ inputs.target == 'docker' }}
        id: grype-docker
        uses: anchore/scan-action@9e8428812aebf5a6a5fc3fdd55de39d1c79b8b12 #v7.0.1
        with:
          image: "${{ env.IMAGE }}"
          output-file: grype.sarif
          fail-build: false
          severity-cutoff: critical
          only-fixed: ${{ inputs.only-fixed }}
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: "Grype scan (Source: High+Critical)"
        if: ${{ inputs.target == 'source' }}
        id: grype-source
        uses: anchore/scan-action@9e8428812aebf5a6a5fc3fdd55de39d1c79b8b12 #v7.0.1
        with:
          path: .
          output-file: grype.sarif
          fail-build: false
          severity-cutoff: critical
          only-fixed: ${{ inputs.only-fixed }}
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: Upload all scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grype.sarif.original
          path: |
            grype.sarif

      - name: "Convert Grype SARIF to CSV"
        env:
          ONLY_HIGH_CRITICAL: ${{ inputs['only-high-critical'] }}
        run: |
          SARIF_FILE=grype.sarif
          jq '. as $input
          | .runs[].results
          |= map(. + {
          security_severity: (
          $input.runs[0].tool.driver.rules[] as $rule
          | select($rule.id == .ruleId)
          | $rule.properties["security-severity"]
          )
          } +
          { info: (
          $input.runs[0].tool.driver.rules[] as $rule
          | select($rule.id == .ruleId)
          | $rule.help.text
          )
          }
          )' "$SARIF_FILE"  > "${SARIF_FILE%.sarif}.ext.sarif"
          # Filter only high and critical (>=7)
          if [ "${ONLY_HIGH_CRITICAL}" = "true" ]; then
          jq '.runs[].results |= map(
              select(
                (.security_severity | tonumber) >= 7
              ) | del(.security_severity) | del(.info)
              )' "${SARIF_FILE%.sarif}.ext.sarif" > "${SARIF_FILE%.sarif}.filtered.sarif"
              mv "${SARIF_FILE%.sarif}.filtered.sarif" "$SARIF_FILE"
          fi
          # Convert to CSV for easier reading
          SECURITY_SEVERITY_THRESHOLD='0'
          if [ "${ONLY_HIGH_CRITICAL}" = "true" ]; then
            SECURITY_SEVERITY_THRESHOLD='7'
          fi
          jq --raw-output --arg sst "$SECURITY_SEVERITY_THRESHOLD" '["CVE", "Severity", "Provider Severity", "Type", "Package", "Affected Version", "Fix Version", "Summary"] as $headers | (
              $headers, (
                  .runs[0].results[] as $result | if ($result.security_severity | tonumber) >= ($sst | tonumber) then
                  [
                      ($result.info | capture("Vulnerability (?<cve>.*)"; "n") | .cve),
                      ($result.security_severity | tonumber | if . < 4 then "Low" elif . < 7 then "Medium" elif . < 9 then "High" else "Critical" end),
                      ($result.info | capture("Severity: (?<severity>\\w+)"; "n") | .severity),
                      ($result.info | capture("Type: (?<type>\\w+)"; "n") | .type),
                      ($result.info | capture("Package: (?<package>.*)"; "n") | .package),
                      ($result.info | capture("Version: (?<version>.*)"; "n") | .version),
                      ($result.info | capture("Fix Version: (?<fix_version>.*)"; "n") | .fix_version),
                      $result.message.text

                  ] else empty end
              )
          ) | @csv' "${SARIF_FILE%.sarif}.ext.sarif" > "${SARIF_FILE%.sarif}.csv"
          rm "${SARIF_FILE%.sarif}.ext.sarif"

      - name: Upload all scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grype.sarif
          path: |
            grype.sarif
            grype.csv

      - name: Upload Grype SARIF
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: grype.sarif

  trivy-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.trivy-scan }}
    needs: [init]
    steps:
      - name: Login to GHCR (docker target)
        if: ${{ inputs.target == 'docker' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef #v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository (source target)
        if: ${{ inputs.target == 'source' }}
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Trivy scan (Docker: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ inputs.target == 'docker' }}
        id: trivy-docker
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #0.33.1
        with:
          image-ref: "${{ env.IMAGE }}"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: trivy.sarif
          format: "sarif"
          ignore-unfixed: ${{ inputs.only-fixed }}
          limit-severities-for-sarif: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: "Trivy scan (Source: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ inputs.target == 'source' }}
        id: trivy-source
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #0.33.1
        with:
          scan-type: "fs"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: trivy.sarif
          format: "sarif"
          ignore-unfixed: ${{ inputs.only-fixed }}
          limit-severities-for-sarif: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: "Convert Trivy SARIF to CSV"
        run: |
          SARIF_FILE=trivy.sarif
          jq '. as $input
          | .runs[].results
          |= map(. + { security_severity: ($input.runs[0].tool.driver.rules[] as $rule
              | select($rule.id == .ruleId)
              | $rule.properties["security-severity"])
              } +
              { info: (
              $input.runs[0].tool.driver.rules[] as $rule
              | select($rule.id == .ruleId)
              | $rule.fullDescription.text | gsub("\n"; " ")
              )})' "$SARIF_FILE"  > "${SARIF_FILE%.sarif}.ext.sarif"

          jq --raw-output '["CVE", "Severity", "Package", "Affected Version", "Fix Version", "Summary"] as $headers | (
              $headers, (
                  .runs[0].results[] as $result | [
                      ($result.ruleId),
                      ($result.message.text | capture("Severity: (?<severity>\\w+)"; "n") | .severity),
                      ($result.message.text | capture("Package: (?<package>.*)"; "n") | .package),
                      ($result.message.text | capture("Installed Version: (?<version>.*)"; "n") | .version),
                      ($result.message.text | capture("Fixed Version: (?<fix_version>.*)"; "n") | .fix_version),
                      ($result.info)
                  ]
              )
          ) | @csv' "${SARIF_FILE%.sarif}.ext.sarif" > "${SARIF_FILE%.sarif}.csv"
          rm "${SARIF_FILE%.sarif}.ext.sarif"

      - name: Upload all scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy.sarif
          path: |
            trivy.sarif
            trivy.csv

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: trivy.sarif
